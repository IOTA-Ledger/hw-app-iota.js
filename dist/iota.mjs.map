{"version":3,"file":"iota.mjs","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/input_validator.js","../src/iota.js"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { isAddress, isTrytes } from 'iota.lib.js/lib/utils/inputValidator';\n\nfunction _isObject(object) {\n  const isNull = object === null;\n\n  return !isNull && typeof object === 'object';\n}\n\nexport function isArray(array) {\n  return array instanceof Array;\n}\n\nexport function isSecurity(security) {\n  return Number.isInteger(security) && security >= 1 && security <= 3;\n}\n\nexport function isIndex(index) {\n  return Number.isInteger(index) && index >= 0;\n}\n\nexport function isTransfersArray(transfers) {\n  if (!isArray(transfers)) {\n    return false;\n  }\n\n  for (let transfer of transfers) {\n    if (!isAddress(transfer.address)) {\n      return false;\n    }\n    if (!Number.isInteger(transfer.value) || transfer.value < 0) {\n      return false;\n    }\n    if (!isTrytes(transfer.tag, '0,27')) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function isInputsArray(inputs) {\n  if (!isArray(inputs)) {\n    return false;\n  }\n\n  for (let input of inputs) {\n    if (!isAddress(input.address)) {\n      return false;\n    }\n    if (!Number.isInteger(input.balance) || input.balance < 0) {\n      return false;\n    }\n    if (!isIndex(input.keyIndex)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function isRemainderObject(remainder) {\n  if (!_isObject(remainder)) {\n    return false;\n  }\n  if (!isAddress(remainder.address)) {\n    return false;\n  }\n  if (!isIndex(remainder.keyIndex)) {\n    return false;\n  }\n\n  return true;\n}\n","import Struct from 'struct';\nimport Bundle from 'iota.lib.js/lib/crypto/bundle/bundle';\nimport {\n  addChecksum,\n  noChecksum,\n  transactionTrytes\n} from 'iota.lib.js/lib/utils/utils';\nimport bippath from 'bip32-path';\nimport semver from 'semver';\nimport * as inputValidator from './input_validator';\n\n/**\n * IOTA API\n * @module hw-app-iota\n */\n\nconst CLA = 0x7a;\nconst Commands = {\n  // specific timeouts:\n  INS_SET_SEED: 0x01, // TIMEOUT_CMD_NON_USER_INTERACTION\n  INS_PUBKEY: 0x02, // TIMEOUT_CMD_PUBKEY\n  INS_TX: 0x03, // TIMEOUT_CMD_NON_USER_INTERACTION => TIMEOUT_CMD_USER_INTERACTION (IF cur_idx == lst_idx)\n  INS_SIGN: 0x04, // TIMEOUT_CMD_PUBKEY\n  INS_GET_APP_CONFIG: 0x10, // TIMEOUT_CMD_NON_USER_INTERACTION\n  INS_RESET: 0xff // TIMEOUT_CMD_NON_USER_INTERACTION\n};\nconst TIMEOUT_CMD_PUBKEY = 10000;\nconst TIMEOUT_CMD_NON_USER_INTERACTION = 10000;\nconst TIMEOUT_CMD_USER_INTERACTION = 150000;\n\nconst LEGACY_VERSION_RANGE = '<0.5';\nconst HASH_LENGTH = 81;\nconst TAG_LENGTH = 27;\nconst SIGNATURE_FRAGMENT_SLICE_LENGTH = 3 * HASH_LENGTH;\nconst EMPTY_TAG = '9'.repeat(TAG_LENGTH);\n\n/**\n * Provides meaningful responses to error codes returned by IOTA Ledger app\n * @param {Object} error - Error statusCode\n * @returns {String} String message corresponding to error statusCode\n */\nfunction getIOTAStatusMessage(error) {\n  // no status code so must not even be communicating\n  if (error.id == 'U2F_5') {\n    return 'Ledger device timeout. Ensure Ledger is plugged in and IOTA app is running';\n  }\n\n  switch (error.statusCode) {\n    // improve text of most common errors\n    case 0x9000: // SW_OK\n      return 'Success';\n    case 0x6700: // SW_INCORRECT_LENGTH\n      return 'Incorrect input length';\n    case 0x6a80: // SW_COMMAND_INVALID_DATA\n      return 'Incorrect data';\n    case 0x6b00: // SW_INCORRECT_P1P2\n      return 'Incorrect command parameter';\n    case 0x6c00: // SW_INCORRECT_LENGTH_P3\n      return 'Incorrect length specified in header';\n    case 0x6d00: // SW_INS_NOT_SUPPORTED\n      return 'Invalid INS command';\n    case 0x6e00: // SW_CLA_NOT_SUPPORTED\n      return 'Incorrect CLA (Wrong application opened)';\n    case 0x6900: // SW_COMMAND_NOT_ALLOWED\n      return 'Command not allowed (Command out of order)';\n    case 0x6982: // SW_SECURITY_STATUS_NOT_SATISFIED\n      return 'Security not satisfied (Device locked)';\n    case 0x6985: // SW_CONDITIONS_OF_USE_NOT_SATISFIED\n      return 'Condition of use not satisfied (Denied by the user)';\n    case 0x6401: // SW_COMMAND_TIMEOUT\n      return 'Security not satisfied (Timeout exceeded)';\n    case 0x69a1: // SW_BUNDLE_ERROR + INSECURE HASH\n      return 'Bundle error (Insecure hash)';\n    case 0x69a2: // SW_BUNDLE_ERROR + NON-ZERO BALANCE\n      return 'Bundle error (Non zero balance)';\n    case 0x69a3: // SW_BUNDLE_ERROR + INVALID META TX\n      return 'Bundle error (Invalid meta transaction)';\n    case 0x69a4: // SW_BUNDLE_ERROR + INVALID ADDRESS INDEX\n      return 'Bundle error (Invalid input address/index pair(s))';\n    case 0x69a5: // SW_BUNDLE_ERROR + ADDRESS REUSED\n      return 'Bundle error (Address reused)';\n\n    // Legacy exceptions\n    case 0x6984: // SW_COMMAND_INVALID_DATA\n      return 'Invalid input data';\n    case 0x6986: // SW_APP_NOT_INITIALIZED\n      return 'App has not been initialized by user';\n    case 0x6991: // SW_TX_INVALID_INDEX\n      return 'Invalid transaction index';\n    case 0x6992: // SW_TX_INVALID_ORDER\n      return 'Invalid transaction order (Output, Inputs, Change)';\n    case 0x6993: // SW_TX_INVALID_META\n      return 'Invalid meta transaction';\n    case 0x6994: // SW_TX_INVALID_OUTPUT\n      return 'Invalid output transaction (Output must come first)';\n\n    default:\n      // UNKNOWN ERROR CODE\n      return error.message;\n  }\n}\n\n/**\n * Class for the interaction with the Ledger IOTA application.\n *\n * @example\n * import Iota from \"hw-app-iota\";\n * const iota = new Iota(transport);\n */\nclass Iota {\n  constructor(transport) {\n    this.transport = transport;\n    this.config = undefined;\n    this.security = 0;\n    this.pathArray = undefined;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        'setActiveSeed',\n        'getAddress',\n        'prepareTransfers',\n        'getAppVersion',\n        'getAppMaxBundleSize'\n      ],\n      'IOT'\n    );\n  }\n\n  /**\n   * Prepares the IOTA seed to be used for subsequent calls.\n   *\n   * @param {String} path - String representation of the BIP32 path. At most 5 levels.\n   * @param {Number} [security=2] - IOTA security level to use\n   * @example\n   * iota.setActiveSeed(\"44'/4218'/0'/0'\", 2);\n   **/\n  async setActiveSeed(path, security = 2) {\n    if (!bippath.validateString(path)) {\n      throw new Error('Invalid BIP32 path string');\n    }\n    const pathArray = bippath.fromString(path).toPathArray();\n    if (!pathArray || pathArray.length < 2 || pathArray.length > 5) {\n      throw new Error('Invalid BIP32 path length');\n    }\n    if (!inputValidator.isSecurity(security)) {\n      throw new Error('Invalid security level provided');\n    }\n\n    this.pathArray = pathArray;\n    this.security = security;\n\n    // query the app config, if not present\n    this.config = this.config ? this.config : await this._getAppConfig();\n\n    if (semver.satisfies(this.config.app_version, LEGACY_VERSION_RANGE)) {\n      // use legacy structs\n      this._createPubkeyInput = this._createPubkeyInputLegacy;\n      this._createTxInput = this._createTxInputLegacy;\n\n      await this._setSeed();\n    } else {\n      // reset the state on the Ledger\n      await this._reset(true);\n    }\n  }\n\n  /**\n   * Generates an address index-based.\n   * The result depends on the initalized seed and security level.\n   *\n   * @param {Integer} index - Index of the address\n   * @param {Object} [options]\n   * @param {Boolean} [options.checksum=false] - Append 9 tryte checksum\n   * @param {Boolean} [options.display=false] - Display generated address on display\n   * @returns {Promise<String>} Tryte-encoded address\n   * @example\n   * iota.getAddress(0, { checksum: true });\n   **/\n  async getAddress(index, options = {}) {\n    if (!this.security) {\n      throw new Error('Seed not yet initalized');\n    }\n    if (!inputValidator.isIndex(index)) {\n      throw new Error('Invalid Index provided');\n    }\n\n    options.checksum = options.checksum || false;\n    options.display = options.display || false;\n\n    const address = await this._publicKey(index, options.display);\n    if (options.checksum) {\n      return addChecksum(address);\n    }\n    return address;\n  }\n\n  /**\n   * Prepares the array of raw transaction data (trytes) by generating a bundle and signing the inputs.\n   *\n   * @param {Object[]} transfers - Transfer objects\n   * @param {String} transfers[].address - Tryte-encoded address of recipient, with or without the 9 tryte checksum\n   * @param {Integer} transfers[].value - Value to be transferred\n   * @param {String} transfers[].tag - Tryte-encoded tag. Maximum value is 27 trytes.\n   * @param {Object[]} inputs - Inputs used for funding the transfer\n   * @param {String} inputs[].address - Tryte-encoded source address, with or without the 9 tryte checksum\n   * @param {Integer} inputs[].balance - Balance of that input\n   * @param {String} inputs[].keyIndex - Index of the address\n   * @param {Object} [remainder] - Destination for sending the remainder value (of the inputs) to.\n   * @param {String} remainder.address - Tryte-encoded address, with or without the 9 tryte checksum\n   * @param {Integer} remainder.keyIndex - Index of the address\n   * @param {Function} [now = Date.now()] - Function to get the milliseconds since the UNIX epoch for timestamps.\n   * @returns {Promise<String[]>} Transaction trytes of 2673 trytes per transaction\n   */\n  async prepareTransfers(transfers, inputs, remainder, now = () => Date.now()) {\n    if (!this.security) {\n      throw new Error('Seed not yet initalized');\n    }\n    if (!inputValidator.isTransfersArray(transfers)) {\n      throw new Error('Invalid transfers array provided');\n    }\n    if (!inputValidator.isInputsArray(inputs)) {\n      throw new Error('Invalid inputs array provided');\n    }\n\n    // filter unnecessary inputs\n    inputs = inputs.filter(input => input.balance > 0);\n\n    if (inputs.length < 1) {\n      throw new Error('At least one input required');\n    }\n    if (transfers.length > 1) {\n      throw new Error('Unsupported number of transfers');\n    }\n\n    const balance = inputs.reduce((a, i) => a + i.balance, 0);\n    const payment = transfers.reduce((a, t) => a + t.value, 0);\n\n    if (balance === payment) {\n      // ignore the remainder, if there is no change\n      remainder = undefined;\n    } else if (!remainder) {\n      throw new Error('Remainder object required');\n    }\n\n    if (remainder) {\n      if (!inputValidator.isRemainderObject(remainder)) {\n        throw new Error('Invalid remainder object provided');\n      }\n\n      remainder = {\n        address: remainder.address,\n        value: balance - payment,\n        keyIndex: remainder.keyIndex\n      };\n    }\n\n    const trytes = await this._prepareTransfers(\n      transfers,\n      inputs,\n      remainder,\n      now\n    );\n    // reset the bundle\n    await this._reset(true);\n\n    return trytes;\n  }\n\n  /**\n   * Retrieves version information about the installed application from the device.\n   *\n   * @returns {Promise<String>} Semantic Version string (i.e. MAJOR.MINOR.PATCH)\n   **/\n  async getAppVersion() {\n    const config = await this._getAppConfig();\n    // update the stored config\n    this.config = config;\n\n    return config.app_version;\n  }\n\n  /**\n   * Retrieves the largest supported number of transactions (including meta transactions)\n   * in one transfer bundle from the device.\n   *\n   * @returns {Promise<Integer>} Maximum bundle size\n   **/\n  async getAppMaxBundleSize() {\n    const config = await this._getAppConfig();\n    // update the stored config\n    this.config = config;\n\n    // return value from config or default 8\n    return config.app_max_bundle_size ? config.app_max_bundle_size : 8;\n  }\n\n  ///////// Private methods should not be called directly! /////////\n\n  _addSeedFields(struct) {\n    return struct\n      .word8('security')\n      .word32Ule('pathLength')\n      .array('pathArray', this.pathArray.length, 'word32Ule');\n  }\n\n  _initSeedFields(struct) {\n    const fields = struct.fields;\n    fields.security = this.security;\n    fields.pathLength = this.pathArray.length;\n    fields.pathArray = this.pathArray;\n  }\n\n  async _setSeed() {\n    const setSeedInStruct = new Struct();\n    this._addSeedFields(setSeedInStruct);\n\n    setSeedInStruct.allocate();\n    this._initSeedFields(setSeedInStruct);\n\n    await this._sendCommand(\n      Commands.INS_SET_SEED,\n      0,\n      0,\n      setSeedInStruct.buffer(),\n      TIMEOUT_CMD_NON_USER_INTERACTION\n    );\n  }\n\n  _createPubkeyInputLegacy(index) {\n    let struct = new Struct();\n    struct = struct.word32Ule('index');\n\n    struct.allocate();\n\n    struct.fields.index = index;\n\n    return struct;\n  }\n\n  _createPubkeyInput(index) {\n    let struct = new Struct();\n    this._addSeedFields(struct);\n    struct = struct.word32Ule('index');\n\n    struct.allocate();\n\n    this._initSeedFields(struct);\n    struct.fields.index = index;\n\n    return struct;\n  }\n\n  async _publicKey(index, display) {\n    const pubkeyInStruct = this._createPubkeyInput(index);\n\n    const response = await this._sendCommand(\n      Commands.INS_PUBKEY,\n      display ? 0x01 : 0x00,\n      0,\n      pubkeyInStruct.buffer(),\n      TIMEOUT_CMD_PUBKEY\n    );\n\n    const pubkeyOutStruct = new Struct().chars('address', HASH_LENGTH);\n    pubkeyOutStruct.setBuffer(response);\n\n    return pubkeyOutStruct.fields.address;\n  }\n\n  async _sign(index, sliceLength) {\n    const signInStruct = new Struct().word32Ule('index');\n\n    signInStruct.allocate();\n    signInStruct.fields.index = index;\n\n    const response = await this._sendCommand(\n      Commands.INS_SIGN,\n      0,\n      0,\n      signInStruct.buffer(),\n      TIMEOUT_CMD_PUBKEY\n    );\n\n    const signOutStruct = new Struct()\n      .chars('signature', sliceLength)\n      .word8Sle('fragmentsRemaining');\n    signOutStruct.setBuffer(response);\n\n    return {\n      signature: signOutStruct.fields.signature,\n      fragmentsRemaining: signOutStruct.fields.fragmentsRemaining\n    };\n  }\n\n  _createTxInputLegacy(address, address_idx, value, tag, tx_idx, tx_len, time) {\n    let struct = new Struct();\n    struct = struct\n      .chars('address', HASH_LENGTH)\n      .word32Ule('address_idx')\n      .word64Sle('value')\n      .chars('tag', TAG_LENGTH)\n      .word32Ule('tx_idx')\n      .word32Ule('tx_len')\n      .word32Ule('time');\n\n    struct.allocate();\n\n    const fields = struct.fields;\n    fields.address = address;\n    fields.address_idx = address_idx;\n    fields.value = value;\n    fields.tag = tag;\n    fields.tx_idx = tx_idx;\n    fields.tx_len = tx_len;\n    fields.time = time;\n\n    return struct;\n  }\n\n  _createTxInput(address, address_idx, value, tag, tx_idx, tx_len, time) {\n    let struct = new Struct();\n    if (tx_idx == 0) {\n      this._addSeedFields(struct);\n    }\n    struct = struct\n      .chars('address', HASH_LENGTH)\n      .word32Ule('address_idx')\n      .word64Sle('value')\n      .chars('tag', TAG_LENGTH)\n      .word32Ule('tx_idx')\n      .word32Ule('tx_len')\n      .word32Ule('time');\n\n    struct.allocate();\n\n    if (tx_idx == 0) {\n      this._initSeedFields(struct);\n    }\n    const fields = struct.fields;\n    fields.address = address;\n    fields.address_idx = address_idx;\n    fields.value = value;\n    fields.tag = tag;\n    fields.tx_idx = tx_idx;\n    fields.tx_len = tx_len;\n    fields.time = time;\n\n    return struct;\n  }\n\n  async _transaction(address, address_idx, value, tag, tx_idx, tx_len, time) {\n    const txInStruct = this._createTxInput(\n      address,\n      address_idx,\n      value,\n      tag,\n      tx_idx,\n      tx_len,\n      time\n    );\n\n    let timeout = TIMEOUT_CMD_NON_USER_INTERACTION;\n    if (tx_idx == tx_len) {\n      timeout = TIMEOUT_CMD_USER_INTERACTION;\n    }\n\n    const response = await this._sendCommand(\n      Commands.INS_TX,\n      tx_idx == 0 ? 0x00 : 0x80,\n      0,\n      txInStruct.buffer(),\n      timeout\n    );\n\n    const txOutStruct = new Struct()\n      .word8('finalized')\n      .chars('bundleHash', HASH_LENGTH);\n    txOutStruct.setBuffer(response);\n\n    return {\n      finalized: txOutStruct.fields.finalized,\n      bundleHash: txOutStruct.fields.bundleHash\n    };\n  }\n\n  async _getSignatureFragments(index, sliceLength) {\n    const numSlices = (this.security * 2187) / sliceLength;\n\n    let signature = '';\n    for (let i = 1; i <= numSlices; i++) {\n      const result = await this._sign(index, sliceLength);\n      signature += result.signature;\n\n      // the remaining fragments must match the num slices\n      if ((i === numSlices) != (result.fragmentsRemaining === 0)) {\n        throw new Error('Wrong signture length');\n      }\n    }\n\n    // split into segments of exactly 2187 chars\n    return signature.match(/.{2187}/g);\n  }\n\n  async _addSignatureFragmentsToBundle(bundle) {\n    for (let i = 0; i < bundle.bundle.length; i++) {\n      const tx = bundle.bundle[i];\n\n      // only sign inputs\n      if (tx.value >= 0) {\n        continue;\n      }\n\n      // compute all the signature fragments for that input transaction\n      const signatureFragments = await this._getSignatureFragments(\n        i,\n        SIGNATURE_FRAGMENT_SLICE_LENGTH\n      );\n      // and set the first fragment\n      tx.signatureMessageFragment = signatureFragments.shift();\n\n      // set the signature fragments for all successive meta transactions\n      const address = tx.address;\n      for (let j = 1; j < this.security; j++) {\n        if (++i >= bundle.bundle.length) {\n          return;\n        }\n\n        const tx = bundle.bundle[i];\n        if (tx.address === address && tx.value === 0) {\n          tx.signatureMessageFragment = signatureFragments.shift();\n        }\n      }\n    }\n  }\n\n  async _signBundle(bundle, addressKeyIndices) {\n    let finalized = false;\n    let bundleHash = '';\n    for (const tx of bundle.bundle) {\n      const keyIndex = addressKeyIndices[tx.address]\n        ? addressKeyIndices[tx.address]\n        : 0;\n      const result = await this._transaction(\n        tx.address,\n        keyIndex,\n        tx.value,\n        tx.obsoleteTag,\n        tx.currentIndex,\n        tx.lastIndex,\n        tx.timestamp\n      );\n      finalized = result.finalized;\n      bundleHash = result.bundleHash;\n    }\n\n    if (!finalized) {\n      throw new Error('Bundle not finalized');\n    }\n    if (bundleHash !== bundle.bundle[0].bundle) {\n      throw new Error('Wrong bundle hash');\n    }\n\n    await this._addSignatureFragmentsToBundle(bundle);\n  }\n\n  _hasDuplicateAddresses(transfers, inputs, remainder) {\n    const set = new Set();\n    transfers.forEach(t => set.add(t.address));\n    inputs.forEach(i => set.add(i.address));\n    if (remainder && set.has(remainder.address)) {\n      return true;\n    }\n\n    return set.length === transfers.length + inputs.length;\n  }\n\n  async _prepareTransfers(transfers, inputs, remainder, now) {\n    transfers = transfers.map(t => ({\n      ...t,\n      // remove checksum\n      address: noChecksum(t.address),\n      // pad tag\n      tag: t.tag ? t.tag.padEnd(TAG_LENGTH, '9') : EMPTY_TAG\n    }));\n    inputs = inputs.map(i => ({\n      ...i,\n      // remove checksum\n      address: noChecksum(i.address),\n      // set correct security level\n      security: this.security\n    }));\n    if (remainder) {\n      // remove checksum\n      remainder = { ...remainder, address: noChecksum(remainder.address) };\n    }\n\n    if (this._hasDuplicateAddresses(transfers, inputs, remainder)) {\n      throw new Error('transaction must not contain duplicate addresses');\n    }\n\n    // use the current time\n    const timestamp = Math.floor(now() / 1000);\n    let bundle = new Bundle();\n\n    transfers.forEach(t =>\n      bundle.addEntry(1, t.address, t.value, t.tag, timestamp, -1)\n    );\n    inputs.forEach(i =>\n      bundle.addEntry(\n        i.security,\n        i.address,\n        -i.balance,\n        EMPTY_TAG,\n        timestamp,\n        i.keyIndex\n      )\n    );\n    if (remainder) {\n      bundle.addEntry(\n        1,\n        remainder.address,\n        remainder.value,\n        EMPTY_TAG,\n        timestamp,\n        remainder.keyIndex\n      );\n    }\n    bundle.addTrytes([]);\n    bundle.finalize();\n\n    // map internal addresses to their index\n    const addressKeyIndices = {};\n    inputs.forEach(i => (addressKeyIndices[i.address] = i.keyIndex));\n    if (remainder) {\n      addressKeyIndices[remainder.address] = remainder.keyIndex;\n    }\n\n    // sign the bundle on the ledger\n    await this._signBundle(bundle, addressKeyIndices);\n\n    // compute and return the corresponding trytes\n    const bundleTrytes = [];\n    bundle.bundle.forEach(tx => bundleTrytes.push(transactionTrytes(tx)));\n    return bundleTrytes.reverse();\n  }\n\n  _createAppConfigOutputLegacy() {\n    const struct = new Struct()\n      .word8('app_flags')\n      .word8('app_version_major')\n      .word8('app_version_minor')\n      .word8('app_version_patch');\n\n    return struct;\n  }\n\n  _createAppConfigOutput() {\n    const struct = new Struct()\n      .word8('app_version_major')\n      .word8('app_version_minor')\n      .word8('app_version_patch')\n      .word8('app_max_bundle_size')\n      .word8('app_flags');\n\n    return struct;\n  }\n\n  async _getAppConfig() {\n    const response = await this._sendCommand(\n      Commands.INS_GET_APP_CONFIG,\n      0,\n      0,\n      undefined,\n      TIMEOUT_CMD_NON_USER_INTERACTION\n    );\n\n    let getAppConfigOutStruct = this._createAppConfigOutput();\n    // check whether the response matches the struct plus 2 bytes status code\n    if (response.length < getAppConfigOutStruct.length() + 2) {\n      getAppConfigOutStruct = this._createAppConfigOutputLegacy();\n    }\n    getAppConfigOutStruct.setBuffer(response);\n\n    const fields = getAppConfigOutStruct.fields;\n    return {\n      app_max_bundle_size: fields.app_max_bundle_size,\n      app_flags: fields.app_flags,\n      app_version:\n        fields.app_version_major +\n        '.' +\n        fields.app_version_minor +\n        '.' +\n        fields.app_version_patch\n    };\n  }\n\n  async _reset(partial = false) {\n    await this._sendCommand(\n      Commands.INS_RESET,\n      partial ? 1 : 0,\n      0,\n      undefined,\n      TIMEOUT_CMD_NON_USER_INTERACTION\n    );\n  }\n\n  async _sendCommand(ins, p1, p2, data, timeout) {\n    const transport = this.transport;\n\n    try {\n      transport.setExchangeTimeout(timeout);\n      return await transport.send(CLA, ins, p1, p2, data);\n    } catch (error) {\n      // set the message according to the status code\n      const smsg = getIOTAStatusMessage(error);\n      error.message = `Ledger device: ${smsg}`;\n      if (error.statusCode) {\n        // add hex status code if present\n        const statusCodeStr = error.statusCode.toString(16);\n        error.message += ` (0x${statusCodeStr})`;\n      }\n      throw error;\n    }\n  }\n}\n\nexport default Iota;\n"],"names":["_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","_isSettledPact","thenable","_iteratorSymbol","Symbol","iterator","_for","test","update","body","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","isArray","array","Array","isIndex","index","Number","isInteger","asyncIterator","const","LEGACY_VERSION_RANGE","EMPTY_TAG","repeat","Iota","constructor","transport","config","undefined","security","pathArray","decorateAppAPIMethods","setActiveSeed","path","semver","satisfies","app_version","_createPubkeyInput","_createPubkeyInputLegacy","_createTxInput","_createTxInputLegacy","_setSeed","_reset","bippath","validateString","Error","fromString","toPathArray","length","inputValidator","_getAppConfig","getAddress","options","checksum","display","_publicKey","address","addChecksum","prepareTransfers","transfers","inputs","remainder","now","Date","_this3","let","transfer","isAddress","isTrytes","tag","input","balance","keyIndex","filter","reduce","a","i","payment","t","object","_prepareTransfers","trytes","getAppVersion","_this4","getAppMaxBundleSize","_this5","app_max_bundle_size","_addSeedFields","struct","word8","word32Ule","_initSeedFields","fields","pathLength","setSeedInStruct","Struct","allocate","_sendCommand","buffer","pubkeyInStruct","response","pubkeyOutStruct","chars","setBuffer","_sign","sliceLength","signInStruct","signOutStruct","word8Sle","signature","fragmentsRemaining","address_idx","tx_idx","tx_len","time","word64Sle","_transaction","txInStruct","timeout","txOutStruct","finalized","bundleHash","_getSignatureFragments","match","numSlices","_this10","_addSignatureFragmentsToBundle","bundle","tx","_this11","signatureFragments","signatureMessageFragment","shift","j","_signBundle","addressKeyIndices","_this12","target","check","step","_cycle","next","done","return","_fixup","TypeError","values","push","_forTo","obsoleteTag","currentIndex","lastIndex","timestamp","_hasDuplicateAddresses","set","Set","forEach","add","has","map","Object","noChecksum","padEnd","_this13","Math","floor","Bundle","addEntry","addTrytes","finalize","bundleTrytes","transactionTrytes","reverse","_createAppConfigOutputLegacy","_createAppConfigOutput","_this14","getAppConfigOutStruct","app_flags","app_version_major","app_version_minor","app_version_patch","partial","ins","p1","p2","data","recover","setExchangeTimeout","send","error","smsg","id","statusCode","message","getIOTAStatusMessage","statusCodeStr","toString"],"mappings":"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"}